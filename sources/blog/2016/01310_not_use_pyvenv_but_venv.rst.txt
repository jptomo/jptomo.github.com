=========================================
pyvenv は deprecated なので venv を使う話
=========================================

:blog_date:`2016/01/31`

Python にはインストールされているパッケージを環境ごとに隔離できる
ソフトウェアとして `virtualenv <https://virtualenv.pypa.io/en/latest/>`_ がある。

これは、 python の実行バイナリとか、ライブラリ、include ファイルなどを
コピーしたりシンボリックリンクつくったりしたりして機能を提供している。

ただコピーしたりシンボリックリンクつくったりするより、もっと手軽に
隔離された環境をつくれると良いよねってことで `PEP 0405 <https://www.python.org/dev/peps/pep-0405/>`__
で議論され, `Python 3.3 <https://www.python.org/download/releases/3.3.0/>`__
で標準のライブラリに `venv <http://docs.python.jp/3.5/library/venv.html>`_ が追加された。

この venv_ 、 ``python -m venv`` といったかたちで venv_ モジュールを呼び出してあげると
つかえるが、 ``pyvenv`` といったコマンドも利用できた。

ただ、 ``pyvnev`` コマンドだと、どのバージョンの Python が利用されるか
分かり辛かったらしい。確かに僕も最初は virtualenv_ と混同していた。

ここらへんの話は
`Issue 25152: venv documentation doesn't tell you how to specify a particular version of python - Python tracker <https://bugs.python.org/issue25152>`_
で進められていて、
`Issue 25154: Drop the pyvenv script - Python tracker <https://bugs.python.org/issue25154>`_
にて将来の Python 3.8 で pyvenv を消す方針とされたらしい。

今後、消されてしまう ``pyvenv`` ではなく ``python -m vnev`` を利用するようにしましょう。

.. code-block:: console

   $ python3 -m venv some_venv

とかで呼び出して。

*venv is not virtualenv* ということで。

ヘルプ
======

以下、 Python 3.5.1 の venv_ ヘルプ

.. code-block:: console

   $ python3.5 -m venv -h
   usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]
               [--upgrade] [--without-pip]
               ENV_DIR [ENV_DIR ...]

   Creates virtual Python environments in one or more target directories.

   positional arguments:
     ENV_DIR               A directory to create the environment in.

   optional arguments:
     -h, --help            show this help message and exit
     --system-site-packages
                           Give the virtual environment access to the system
                           site-packages dir.
     --symlinks            Try to use symlinks rather than copies, when symlinks
                           are not the default for the platform.
     --copies              Try to use copies rather than symlinks, even when
                           symlinks are the default for the platform.
     --clear               Delete the contents of the environment directory if it
                           already exists, before environment creation.
     --upgrade             Upgrade the environment directory to use this version
                           of Python, assuming Python has been upgraded in-place.
     --without-pip         Skips installing or upgrading pip in the virtual
                           environment (pip is bootstrapped by default)

   Once an environment has been created, you may wish to activate it, e.g. by
   sourcing an activate script in its bin directory.

参考
====

- `pyvenv コマンドは deprecated なんで忘れて python3.5 -m venv しましょう。 <https://twitter.com/methane/status/671986192108261376>`_

